// <auto-generated />
using System;
using DbIns;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DbIns.Migrations
{
    [DbContext(typeof(DbInsContext))]
    [Migration("20250505142425_new11tables")]
    partial class new11tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DbIns.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Apartment")
                        .HasColumnType("integer");

                    b.Property<int>("Entrance")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdCity")
                        .HasColumnType("uuid");

                    b.Property<string>("NameStreet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberHome")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCity");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DbIns.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdAnimal")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdInsCompany")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdInsPerson")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdInsType")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdAnimal");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdInsCompany");

                    b.HasIndex("IdInsPerson");

                    b.HasIndex("IdInsType");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("DbIns.Models.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeAnimal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("DbIns.Models.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdAddress")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdAddress");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("DbIns.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DbIns.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdAddress")
                        .HasColumnType("uuid");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAddress");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DbIns.Models.InsCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InsCompanies");
                });

            modelBuilder.Entity("DbIns.Models.InsPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdAddress")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdLicenseAuto")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTransport")
                        .HasColumnType("uuid");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdAddress");

                    b.HasIndex("IdLicenseAuto");

                    b.HasIndex("IdTransport");

                    b.ToTable("InsPersons");
                });

            modelBuilder.Entity("DbIns.Models.InsType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InsTypes");
                });

            modelBuilder.Entity("DbIns.Models.LicenseAuto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LicenseAutos");
                });

            modelBuilder.Entity("DbIns.Models.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CityNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("DbIns.Models.Address", b =>
                {
                    b.HasOne("DbIns.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DbIns.Models.Agreement", b =>
                {
                    b.HasOne("DbIns.Models.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("IdAnimal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbIns.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbIns.Models.InsCompany", "InsCompany")
                        .WithMany()
                        .HasForeignKey("IdInsCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbIns.Models.InsPerson", "InsPerson")
                        .WithMany()
                        .HasForeignKey("IdInsPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbIns.Models.InsType", "InsType")
                        .WithMany()
                        .HasForeignKey("IdInsType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Client");

                    b.Navigation("InsCompany");

                    b.Navigation("InsPerson");

                    b.Navigation("InsType");
                });

            modelBuilder.Entity("DbIns.Models.Apartment", b =>
                {
                    b.HasOne("DbIns.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DbIns.Models.Client", b =>
                {
                    b.HasOne("DbIns.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DbIns.Models.InsPerson", b =>
                {
                    b.HasOne("DbIns.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbIns.Models.LicenseAuto", "LicenseAuto")
                        .WithMany()
                        .HasForeignKey("IdLicenseAuto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbIns.Models.Transport", "Transport")
                        .WithMany()
                        .HasForeignKey("IdTransport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("LicenseAuto");

                    b.Navigation("Transport");
                });
#pragma warning restore 612, 618
        }
    }
}
